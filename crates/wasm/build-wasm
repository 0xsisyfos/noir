#!/usr/bin/env bash

# Clear out the existing build artifacts as these aren't automatically removed by wasm-pack.
if [ -d ./pkg/ ]; then
    rm -rf ./pkg/
fi

# Enter the nix-shell environment
nix-shell wasm.nix --run '

# Build the new wasm package
cargo build --target wasm32-unknown-unknown --release

# Create output directories for nodejs and web
mkdir -p pkg/nodejs pkg/web

# Copy the generated wasm to the output directories
cp target/wasm32-unknown-unknown/release/noir_wasm.wasm pkg/nodejs
cp target/wasm32-unknown-unknown/release/noir_wasm.wasm pkg/web

# Generate the respective package.json files using wasm-bindgen
wasm-bindgen --out-dir pkg/nodejs --target nodejs target/wasm32-unknown-unknown/release/noir_wasm.wasm
wasm-bindgen --out-dir pkg/web --target web target/wasm32-unknown-unknown/release/noir_wasm.wasm

COMMIT_SHORT=$(git rev-parse --short HEAD)
VERSION_APPENDIX=""
if [ -n "$COMMIT_SHORT" ]; then
    VERSION_APPENDIX="-$COMMIT_SHORT"
else
    VERSION_APPENDIX="-NOGIT"
fi

jq -s ".[0] * .[1]" pkg/nodejs/package.json pkg/web/package.json | jq ".files = [\"nodejs\", \"web\", \"package.json\"]" | jq ".version += \"$VERSION_APPENDIX\"" | jq ".main = \"./nodejs/\" + .main | .module = \"./web/\" + .module | .types = \"./web/\" + .types | .peerDependencies = { \"@noir-lang/noir-source-resolver\": \"1.1.2\" }" | tee ./pkg/package.json

rm pkg/nodejs/package.json pkg/nodejs/README.md pkg/nodejs/.gitignore

rm pkg/web/package.json pkg/web/README.md pkg/web/.gitignore
'


# Log the contents of the pkg directory
echo "Contents of pkg directory:"
ls -la ./pkg

# Log the contents of the generated package.json file
echo "Contents of package.json:"
cat ./pkg/package.json