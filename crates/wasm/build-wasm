#!/usr/bin/env bash

# Clear out the existing build artifacts as these aren't automatically removed
if [ -d ./binding/ ]; then
    rm -rf ./binding/
fi

# Determine system.
if [[ "$OSTYPE" == "darwin"* ]]; then
    OS=macos
elif [[ "$OSTYPE" == "linux-gnu" ]]; then
    OS=linux
else
    echo "Unknown OS: $OSTYPE"
    exit 1
fi

if [ "$OS" == "macos" ]; then
    export BREW_PREFIX=$(brew --prefix)
    # Ensure we have toolchain.
    if [ ! "$?" -eq 0 ] || [ ! -f "$BREW_PREFIX/opt/llvm/bin/clang++" ]; then
        echo "Default clang not sufficient. Install homebrew, and then: brew install llvm"
        exit 1
    fi
    export CC=$BREW_PREFIX/opt/llvm/bin/clang
    export AR=$BREW_PREFIX/opt/llvm/bin/llvm-ar
else
    export CC=clang
    export AR=llvm-ar
fi

# Build the new wasm code
cargo build --lib --release
wasm-tools component new ../../target/wasm32-unknown-unknown/release/noir_wasm.wasm -o ../../target/wasm32-unknown-unknown/release/noir_wasm.component.wasm
# -I is the important part because it allows "instantiation" which allows us to pass in our imports
wit-bindgen host js -I ../../target/wasm32-unknown-unknown/release/noir_wasm.component.wasm --out-dir binding
