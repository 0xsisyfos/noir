#!/usr/bin/env bash

# Clear out the existing build artifacts as these aren't automatically removed.
if [ -d ./pkg_output/ ]; then
    rm -rf ./pkg_output/
fi

# Build the wasm crate using Nix
nix-build wasm.nix

# Create the pkg_output directory
mkdir -p pkg_output

# Copy the built wasm to the pkg_output directory
cp -r ./result pkg_output

COMMIT_SHORT=$(git rev-parse --short HEAD)
VERSION_APPENDIX=""
if [ -n "$COMMIT_SHORT" ]; then
    VERSION_APPENDIX="-$COMMIT_SHORT"
else
    VERSION_APPENDIX="-NOGIT"
fi

# Generate the package.json file
jq -n \
  --arg version_appendix "$VERSION_APPENDIX" \
  --arg main "./nodejs/noir_wasm.js" \
  --arg module "./web/noir_wasm.js", \
  --arg types "./web/noir_wasm.d.ts" 
  '{
    "name": "@noir-lang/noir_wasm",
    "collaborators": [
        "The Noir Team <team@noir-lang.org>"
    ],
    "version": "0.4.1" + $version_appendix,
    "main": $main,
    "module": $module,
    "types": $types,
    "files":  [
        "nodejs",
        "web",
        "package.json"
    ],
    "peerDependencies": {
      "@noir-lang/noir-source-resolver": "1.1.2"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/noir-lang/noir_wasm.git"
    },
  }' > ./pkg_output/package.json

# Log the contents of the pkg_output directory
echo "Contents of pkg_output directory:"
ls -la ./pkg_output

# Log the contents of the generated package.json file
echo "Contents of package.json:"
cat ./pkg_output/package.json
