"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoteAlgorithms = void 0;
const bigint_buffer_1 = require("../bigint_buffer");
class NoteAlgorithms {
    constructor(wasm) {
        this.wasm = wasm;
    }
    valueNoteNullifier(noteCommitment, accountPrivateKey, real = true) {
        this.wasm.transferToHeap(noteCommitment, 0);
        this.wasm.transferToHeap(accountPrivateKey, 64);
        this.wasm.call("notes__value_note_nullifier", 0, 64, real, 0);
        return Buffer.from(this.wasm.sliceMemory(0, 32));
    }
    valueNoteNullifierBigInt(noteCommitment, accountPrivateKey, real = true) {
        return (0, bigint_buffer_1.toBigIntBE)(this.valueNoteNullifier(noteCommitment, accountPrivateKey, real));
    }
    valueNoteCommitment(note) {
        const noteBuf = note.toBuffer();
        const mem = this.wasm.call("bbmalloc", noteBuf.length);
        this.wasm.transferToHeap(noteBuf, mem);
        this.wasm.call("notes__value_note_commitment", mem, 0);
        this.wasm.call("bbfree", mem);
        return Buffer.from(this.wasm.sliceMemory(0, 32));
    }
    valueNotePartialCommitment(noteSecret, owner, accountRequired) {
        this.wasm.transferToHeap(noteSecret, 0);
        this.wasm.transferToHeap(owner.toBuffer(), 32);
        // Currently this is only used for creating the value notes from a claim note.
        // Given these notes are owned by the creator of the claim note, we can leave creator pubkey as 0.
        this.wasm.transferToHeap(Buffer.alloc(32), 96);
        this.wasm.call("notes__value_note_partial_commitment", 0, 32, 96, accountRequired, 0);
        return Buffer.from(this.wasm.sliceMemory(0, 32));
    }
    claimNotePartialCommitment(note) {
        const noteBuf = note.toBuffer();
        const mem = this.wasm.call("bbmalloc", noteBuf.length);
        this.wasm.transferToHeap(noteBuf, mem);
        this.wasm.call("notes__claim_note_partial_commitment", mem, 0);
        this.wasm.call("bbfree", mem);
        return Buffer.from(this.wasm.sliceMemory(0, 32));
    }
    claimNoteCompletePartialCommitment(partialNote, interactionNonce, fee) {
        this.wasm.transferToHeap(partialNote, 0);
        this.wasm.transferToHeap((0, bigint_buffer_1.toBufferBE)(fee, 32), 32);
        this.wasm.call("notes__claim_note_complete_partial_commitment", 0, interactionNonce, 32, 0);
        return Buffer.from(this.wasm.sliceMemory(0, 32));
    }
    claimNoteCommitment(note) {
        const partial = this.claimNotePartialCommitment(note);
        return this.claimNoteCompletePartialCommitment(partial, note.defiInteractionNonce, note.fee);
    }
    claimNoteNullifier(noteCommitment) {
        this.wasm.transferToHeap(noteCommitment, 0);
        this.wasm.call("notes__claim_note_nullifier", 0, 0);
        return Buffer.from(this.wasm.sliceMemory(0, 32));
    }
    defiInteractionNoteCommitment(note) {
        const noteBuf = note.toBuffer();
        const mem = this.wasm.call("bbmalloc", noteBuf.length);
        this.wasm.transferToHeap(noteBuf, mem);
        this.wasm.call("notes__defi_interaction_note_commitment", mem, 0);
        this.wasm.call("bbfree", mem);
        return Buffer.from(this.wasm.sliceMemory(0, 32));
    }
    accountNoteCommitment(aliasHash, accountPublicKey, spendingPublicKey) {
        this.wasm.transferToHeap(aliasHash.toBuffer32(), 0);
        this.wasm.transferToHeap(accountPublicKey.toBuffer(), 32);
        this.wasm.transferToHeap(spendingPublicKey, 64);
        this.wasm.call("notes__account_note_commitment", 0, 32, 64, 0);
        return Buffer.from(this.wasm.sliceMemory(0, 32));
    }
    accountAliasHashNullifier(aliasHash) {
        this.wasm.transferToHeap(aliasHash.toBuffer32(), 0);
        this.wasm.call("notes__compute_account_alias_hash_nullifier", 0, 0);
        return Buffer.from(this.wasm.sliceMemory(0, 32));
    }
    accountPublicKeyNullifier(accountPublicKey) {
        this.wasm.transferToHeap(accountPublicKey.toBuffer(), 0);
        this.wasm.call("notes__compute_account_public_key_nullifier", 0, 0);
        return Buffer.from(this.wasm.sliceMemory(0, 32));
    }
}
exports.NoteAlgorithms = NoteAlgorithms;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90ZV9hbGdvcml0aG1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy9ub3RlX2FsZ29yaXRobXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsb0RBQTBEO0FBTTFELE1BQWEsY0FBYztJQUN6QixZQUFvQixJQUFzQjtRQUF0QixTQUFJLEdBQUosSUFBSSxDQUFrQjtJQUFHLENBQUM7SUFFdkMsa0JBQWtCLENBQ3ZCLGNBQXNCLEVBQ3RCLGlCQUF5QixFQUN6QixJQUFJLEdBQUcsSUFBSTtRQUVYLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5RCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVNLHdCQUF3QixDQUM3QixjQUFzQixFQUN0QixpQkFBeUIsRUFDekIsSUFBSSxHQUFHLElBQUk7UUFFWCxPQUFPLElBQUEsMEJBQVUsRUFDZixJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUNqRSxDQUFDO0lBQ0osQ0FBQztJQUVNLG1CQUFtQixDQUFDLElBQWM7UUFDdkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMs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