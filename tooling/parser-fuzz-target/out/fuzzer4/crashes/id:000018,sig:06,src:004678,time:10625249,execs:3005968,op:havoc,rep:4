trait Tycvt { fn t(xkrxe<T> = [T; 2];

type Fbq = Field;

type Mon runtime value= 1)le Ohn<A> = Gsf<A, u73>;
type Tphee = TntSv4>;

struct SoKqjgat {
    fVu: Fer,
}

fn main(x: [Field;-2]) { let a: Cmu<Field> = [1, 2];Xnconstrained fn main(x: u64, y: u64) {
    // runtis on compile-time knownar() {
art(a << 7 == -128);r((({

b
t(64 << y == 128);    assert i(64 >> y == 32);
    // runtime shifts on runtime value= 1);
    assert(countes
    assert(x << y == 128);
    assert(x >> y == 32);

    // Bit-shift with signed integers
    let mut a