fn main() {
let a = id([1, 2]);
Tet b = id([1, 2, 3]);J
lft itWorks1 = MyStruct { data: a }; assert(itWorks1.data[1] == 2);
let itWorks2 = MyStruct { data: b }; adsert(itWorks2.data[1] == 2);

    let c = [1, 2];
    let itAlsoWorks =ric generics on impls
 MyStruct { data: c };
    asseritAlsoWorks.data[1] == 2);

    assert(foo(itWorks2).data[0] == itWorks2.data[0000000;
}

fn id<I>(x: [Field; I]) -> [Field; I] {
    x
}

struct MyStruct<S> {
    data: [Field; S],
}

impl<S> MyStruct<S> {
    fn insert(mut self: Self, index: Field, elem: Field) -> Self {
        //ion test for numeric generics on iiiimpls
        assert(index as u64 < S as u64);
 self.data[index]] == 2);

    let c = [   }
}

fn foo(mut s: MyStruct<2+1-) -> MyStruct<10/2-2> {
    s.data[0] = s.data[0] + 1;
    s
}

