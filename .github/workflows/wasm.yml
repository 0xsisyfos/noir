name: Wasm

on:
  push:
    branches:
      - jb/noir-testing-workflow
      - tom/noir-wasm-testing

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-wasm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-22.11
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build wasm package
        run: |
          nix build -L .#wasm

      - name: Dereference symlink
        run: echo "UPLOAD_PATH=$(readlink -f result)" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: noir_wasm
          path: ${{ env.UPLOAD_PATH }}
          retention-days: 3

  build-nargo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-22.11
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: barretenberg

      - name: Restore nix store cache
        id: nix-store-cache
        uses: actions/cache@v3
        with:
          path: /tmp/nix-cache
          key: ${{ runner.os }}-flake-${{ hashFiles('*.lock') }}

      - name: Copy cache into nix store
        if: steps.nix-store-cache.outputs.cache-hit == 'true'
        run: |
          for narinfo in /tmp/nix-cache/*.narinfo; do
            path=$(head -n 1 "$narinfo" | awk '{print $2}')
            nix copy --no-check-sigs --from "file:///tmp/nix-cache" "$path"
          done

      - name: Build nargo
        run: |
          nix build -L .

      - name: Dereference symlink
        run: echo "UPLOAD_PATH=$(readlink -f result)" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: nargo
          path: ${{ env.UPLOAD_PATH }}
          retention-days: 3

  test:
    needs: [build-wasm, build-nargo]
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout noir-wasm-testing
        uses: actions/checkout@v3
        with:
          repository: noir-lang/noir-wasm-testing
          ref: use-injected-nargo

      - name: Download wasm package artifact
        uses: actions/download-artifact@v3
        with:
          name: noir_wasm
          path: ./@noir-lang_noir_wasm

      - name: Inject built wasm into noir-wasm-testing
        run: |
          jq '.dependencies["@noir-lang/noir_wasm"] = "file:./@noir-lang_noir_wasm"' ./package.json > ./package.json.tmp
          mv ./package.json.tmp ./package.json

      - name: Download nargo binary
        uses: actions/download-artifact@v3
        with:
          name: nargo
          path: ./nargo

      - name: Run noir-wasm-testing program
        run: |
          ls -R
          nargo_binary=$(find . -name "nargo")
          chmod +x $nargo_binary
          if [ -f "$nargo_binary" ]; then
            echo "nargo binary found at $nargo_binary."
            $nargo_binary -p "${{ github.workspace }}/src/noir-script" compile noir-wasm-testing
          else
            echo "nargo binary NOT found."
            exit 1
          fi

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test
