name: Wasm

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Wasm
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Setup Nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-22.11
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy build.log to workspace
        run: |
          cp $(nix-build --no-link -A packages.x86_64-linux.wasm)/build.log $GITHUB_WORKSPACE
        shell: bash

      - name: Output build.log
        run: |
          BUILD_LOG_PATH=$(find . -name build.log)
          if [ -n "$BUILD_LOG_PATH" ]; then
            echo "Printing build.log:"
            cat $BUILD_LOG_PATH
          else
            echo "Couldn't find build.log"
          fi

      # - name: Copy hello_world.txt to workspace
      #   run: |
      #     cp $(nix-build --no-link -A packages.x86_64-linux.wasm)/hello_world.txt $GITHUB_WORKSPACE
      #   shell: bash

      # - name: Output hello_world.txt
      #   run: |
      #     HELLO_WORLD_PATH=$(find . -name hello_world.txt)
      #     if [ -n "$HELLO_WORLD_PATH" ]; then
      #       echo "Printing hello_world.txt:"
      #       cat $HELLO_WORLD_PATH
      #     else
      #       echo "Couldn't find hello_world.txt"
      #     fi

      # - name: Output build.log location
      #   run: |
      #     BUILD_LOG_PATH=$(find . -name build.log)
      #     echo "path is $BUILD_LOG_PATH"
      #     if [ -n "$BUILD_LOG_PATH" ]; then
      #       echo "Found build.log at $BUILD_LOG_PATH"
      #     else
      #       echo "build.log not found"
      #     fi

      # - name: Print build.log if build failed
      #   run: |
      #     if [ -d result ]; then
      #       echo "Build successful."
      #     else
      #       echo "Build failed. Trying to locate build.log:"
      #       find . -name build.log
      #       echo "Printing the build.log (if found):"
      #       find . -name build.log -exec cat {} \; || true
      #     fi

      # - name: Build wasm package
      #     run: nix build .#packages.wasm --keep-failed

      # - name: Copy wasm build result
      #   working-directory: ./crates/wasm
      #   run: cp -r ./result ./pkg

      # - name: Checkout noir-wasm-testing
      #   uses: actions/checkout@v3
      #   with:
      #     repository: noir-lang/noir-wasm-testing
      #     path: noir-wasm-testing

      # - name: Inject built wasm into noir-wasm-testing
      #   run: |
      #     cp -r ./crates/wasm/result ./noir-wasm-testing/@noir-lang_noir_wasm
      #     jq '.dependencies["@noir-lang/noir_wasm"] = "file:./node_modules/@noir-lang/noir_wasm"' ./noir-wasm-testing/package.json > ./noir-wasm-testing/package.json.tmp
      #     mv ./noir-wasm-testing/package.json.tmp ./noir-wasm-testing/package.json

      # - name: Log package information
      #   working-directory: ./noir-wasm-testing
      #   run: |
      #     echo "Wasm contents:"
      #     ls -la ./@noir-lang_noir_wasm
      #     echo "Directory contents:"
      #     ls -la
      #     echo "package.json contents:"
      #     cat package.json
      #     echo "Checking if noir-script.json exists:"
      #     if [ -f "./src/noir-script/target/noir-script.json" ]; then
      #       echo "File exists."
      #     else
      #       echo "File does not exist."
      #     fi

      # - name: Run build.sh in noir-wasm-testing
      #   working-directory: ./noir-wasm-testing
      #   run: |
      #     chmod +x build.sh
      #     ./build.sh

      # - name: Install dependencies
      #   working-directory: ./noir-wasm-testing
      #   run: npm install

      # - name: Run tests
      #   working-directory: ./noir-wasm-testing
      #   run: npm test
